{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilnaz\\\\Desktop\\\\Pinocchio\\\\pinocchio-react\\\\src\\\\components\\\\screens\\\\Main\\\\TapZone.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useRef, useState } from 'react';\nimport goldenCoin from '../../../assets/pictures/coins/golden/coin.svg';\nimport silverCoin from '../../../assets/pictures/coins/silver/coin.svg';\nimport axiosDB from '../../../utils/axios/axiosConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tg = window.Telegram.WebApp;\nconst TapZone = ({\n  telegramId,\n  currentEnergy,\n  setCurrentEnergy,\n  energyReduction,\n  stage,\n  boostData,\n  currentCoins,\n  setCurrentCoins,\n  updateUserData\n}) => {\n  _s();\n  const tapTimeout = useRef(null);\n  const latestCoins = useRef(currentCoins);\n  const [totalTaps, setTotalTaps] = useState(0);\n  const pendingTaps = useRef(0);\n  latestCoins.current = currentCoins;\n  const debouncedUpdateUserData = useCallback(() => {\n    if (tapTimeout.current) {\n      clearTimeout(tapTimeout.current);\n    }\n    tapTimeout.current = setTimeout(async () => {\n      if (latestCoins.current >= 1000000) {\n        updateUserData();\n      }\n      try {\n        const touchesToSend = pendingTaps.current;\n        const response = await axiosDB.put('/user/update', {\n          telegramId,\n          touches: touchesToSend\n        });\n        console.log('Server response:', response.data);\n        pendingTaps.current = 0;\n        setTotalTaps(0);\n      } catch (error) {\n        console.error('Error updating user:', error);\n      }\n    }, 300);\n  }, [telegramId, updateUserData]);\n  const handleTouchStart = useCallback(e => {\n    var _boostData$dailyBoost, _boostData$dailyBoost2;\n    const touches = e.touches ? e.touches.length : 0;\n    if (currentEnergy < energyReduction) {\n      console.log(`Not enough energy for reduction. Current energy: ${currentEnergy}`);\n      return;\n    }\n    if (tg.HapticFeedback) {\n      tg.HapticFeedback.impactOccurred('light');\n    }\n    const boostEndTime = new Date((boostData === null || boostData === void 0 ? void 0 : (_boostData$dailyBoost = boostData.dailyBoosts) === null || _boostData$dailyBoost === void 0 ? void 0 : (_boostData$dailyBoost2 = _boostData$dailyBoost[1]) === null || _boostData$dailyBoost2 === void 0 ? void 0 : _boostData$dailyBoost2.endTime) || 0);\n    const isBoostActive = boostEndTime > Date.now();\n    const energySpent = isBoostActive ? energyReduction * touches * 10 : energyReduction * touches;\n    const newEnergy = Math.max(0, currentEnergy - energyReduction);\n    const coinsToAdd = Math.max(0, energySpent);\n    if (newEnergy === currentEnergy) {\n      console.log(`Energy was not updated. Current energy: ${currentEnergy}, energy spent: ${energySpent}`);\n      return;\n    }\n    const newTaps = [];\n\n    // Проходим по всем касаниям (пальцам) на экране\n    for (let i = 0; i < e.touches.length; i++) {\n      const {\n        clientX,\n        clientY\n      } = e.touches[i];\n      const rect = e.target.getBoundingClientRect();\n      if (!rect) {\n        console.error('Unable to get bounding rect');\n        continue;\n      }\n      const newTap = {\n        id: Date.now() + i,\n        // Уникальный ID\n        x: clientX - rect.left,\n        y: clientY - rect.top\n      };\n      newTaps.push(newTap);\n    }\n    setTaps(prevTaps => [...prevTaps, ...newTaps]);\n    setTimeout(() => {\n      setTaps(prevTaps => prevTaps.filter(tap => !newTaps.some(newTap => newTap.id === tap.id)));\n    }, 1000);\n    setCurrentEnergy(newEnergy);\n    setCurrentCoins(latestCoins.current + coinsToAdd);\n    pendingTaps.current += touches;\n    setTotalTaps(prev => prev + touches);\n    debouncedUpdateUserData();\n  }, [currentEnergy, energyReduction, boostData, setCurrentEnergy, setCurrentCoins, debouncedUpdateUserData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tap-zone\",\n    onTouchStart: handleTouchStart,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: stage === 1 ? silverCoin : goldenCoin,\n      alt: \"coin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 4\n    }, this), taps.map(tap => /*#__PURE__*/_jsxDEV(\"span\", {\n      className: style.tap_number,\n      style: {\n        top: `${tap.y}px`,\n        left: `${tap.x}px`\n      },\n      children: \"+1\"\n    }, tap.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 3\n  }, this);\n};\n_s(TapZone, \"xwig8uwZvh2dNaFRFM6e2iBjwyE=\");\n_c = TapZone;\nexport default TapZone;\nvar _c;\n$RefreshReg$(_c, \"TapZone\");","map":{"version":3,"names":["React","useCallback","useRef","useState","goldenCoin","silverCoin","axiosDB","jsxDEV","_jsxDEV","tg","window","Telegram","WebApp","TapZone","telegramId","currentEnergy","setCurrentEnergy","energyReduction","stage","boostData","currentCoins","setCurrentCoins","updateUserData","_s","tapTimeout","latestCoins","totalTaps","setTotalTaps","pendingTaps","current","debouncedUpdateUserData","clearTimeout","setTimeout","touchesToSend","response","put","touches","console","log","data","error","handleTouchStart","e","_boostData$dailyBoost","_boostData$dailyBoost2","length","HapticFeedback","impactOccurred","boostEndTime","Date","dailyBoosts","endTime","isBoostActive","now","energySpent","newEnergy","Math","max","coinsToAdd","newTaps","i","clientX","clientY","rect","target","getBoundingClientRect","newTap","id","x","left","y","top","push","setTaps","prevTaps","filter","tap","some","prev","className","onTouchStart","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","taps","map","style","tap_number","_c","$RefreshReg$"],"sources":["C:/Users/ilnaz/Desktop/Pinocchio/pinocchio-react/src/components/screens/Main/TapZone.jsx"],"sourcesContent":["import React, { useCallback, useRef, useState } from 'react'\r\nimport goldenCoin from '../../../assets/pictures/coins/golden/coin.svg'\r\nimport silverCoin from '../../../assets/pictures/coins/silver/coin.svg'\r\nimport axiosDB from '../../../utils/axios/axiosConfig'\r\n\r\nconst tg = window.Telegram.WebApp\r\n\r\nconst TapZone = ({\r\n\ttelegramId,\r\n\tcurrentEnergy,\r\n\tsetCurrentEnergy,\r\n\tenergyReduction,\r\n\tstage,\r\n\tboostData,\r\n\tcurrentCoins,\r\n\tsetCurrentCoins,\r\n\tupdateUserData,\r\n}) => {\r\n\tconst tapTimeout = useRef(null)\r\n\tconst latestCoins = useRef(currentCoins)\r\n\tconst [totalTaps, setTotalTaps] = useState(0)\r\n\tconst pendingTaps = useRef(0)\r\n\r\n\tlatestCoins.current = currentCoins\r\n\r\n\tconst debouncedUpdateUserData = useCallback(() => {\r\n\t\tif (tapTimeout.current) {\r\n\t\t\tclearTimeout(tapTimeout.current)\r\n\t\t}\r\n\r\n\t\ttapTimeout.current = setTimeout(async () => {\r\n\t\t\tif (latestCoins.current >= 1000000) {\r\n\t\t\t\tupdateUserData()\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst touchesToSend = pendingTaps.current\r\n\t\t\t\tconst response = await axiosDB.put('/user/update', {\r\n\t\t\t\t\ttelegramId,\r\n\t\t\t\t\ttouches: touchesToSend,\r\n\t\t\t\t})\r\n\t\t\t\tconsole.log('Server response:', response.data)\r\n\r\n\t\t\t\tpendingTaps.current = 0\r\n\t\t\t\tsetTotalTaps(0)\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error('Error updating user:', error)\r\n\t\t\t}\r\n\t\t}, 300)\r\n\t}, [telegramId, updateUserData])\r\n\r\n\tconst handleTouchStart = useCallback(\r\n\t\te => {\r\n\t\t\tconst touches = e.touches ? e.touches.length : 0\r\n\r\n\t\t\tif (currentEnergy < energyReduction) {\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t`Not enough energy for reduction. Current energy: ${currentEnergy}`\r\n\t\t\t\t)\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tif (tg.HapticFeedback) {\r\n\t\t\t\ttg.HapticFeedback.impactOccurred('light')\r\n\t\t\t}\r\n\r\n\t\t\tconst boostEndTime = new Date(boostData?.dailyBoosts?.[1]?.endTime || 0)\r\n\t\t\tconst isBoostActive = boostEndTime > Date.now()\r\n\t\t\tconst energySpent = isBoostActive\r\n\t\t\t\t? energyReduction * touches * 10\r\n\t\t\t\t: energyReduction * touches\r\n\r\n\t\t\tconst newEnergy = Math.max(0, currentEnergy - energyReduction)\r\n\t\t\tconst coinsToAdd = Math.max(0, energySpent)\r\n\r\n\t\t\tif (newEnergy === currentEnergy) {\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t`Energy was not updated. Current energy: ${currentEnergy}, energy spent: ${energySpent}`\r\n\t\t\t\t)\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tconst newTaps = []\r\n\r\n\t\t\t// Проходим по всем касаниям (пальцам) на экране\r\n\t\t\tfor (let i = 0; i < e.touches.length; i++) {\r\n\t\t\t\tconst { clientX, clientY } = e.touches[i]\r\n\t\t\t\tconst rect = e.target.getBoundingClientRect()\r\n\r\n\t\t\t\tif (!rect) {\r\n\t\t\t\t\tconsole.error('Unable to get bounding rect')\r\n\t\t\t\t\tcontinue\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst newTap = {\r\n\t\t\t\t\tid: Date.now() + i, // Уникальный ID\r\n\t\t\t\t\tx: clientX - rect.left,\r\n\t\t\t\t\ty: clientY - rect.top,\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnewTaps.push(newTap)\r\n\t\t\t}\r\n\t\t\tsetTaps(prevTaps => [...prevTaps, ...newTaps])\r\n\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tsetTaps(prevTaps =>\r\n\t\t\t\t\tprevTaps.filter(tap => !newTaps.some(newTap => newTap.id === tap.id))\r\n\t\t\t\t)\r\n\t\t\t}, 1000)\r\n\t\t\tsetCurrentEnergy(newEnergy)\r\n\t\t\tsetCurrentCoins(latestCoins.current + coinsToAdd)\r\n\r\n\t\t\tpendingTaps.current += touches\r\n\t\t\tsetTotalTaps(prev => prev + touches)\r\n\r\n\t\t\tdebouncedUpdateUserData()\r\n\t\t},\r\n\t\t[\r\n\t\t\tcurrentEnergy,\r\n\t\t\tenergyReduction,\r\n\t\t\tboostData,\r\n\t\t\tsetCurrentEnergy,\r\n\t\t\tsetCurrentCoins,\r\n\t\t\tdebouncedUpdateUserData,\r\n\t\t]\r\n\t)\r\n\r\n\treturn (\r\n\t\t<div className='tap-zone' onTouchStart={handleTouchStart}>\r\n\t\t\t<img src={stage === 1 ? silverCoin : goldenCoin} alt='coin' />\r\n\t\t\t{taps.map(tap => (\r\n\t\t\t\t<span\r\n\t\t\t\t\tkey={tap.id}\r\n\t\t\t\t\tclassName={style.tap_number}\r\n\t\t\t\t\tstyle={{ top: `${tap.y}px`, left: `${tap.x}px` }}\r\n\t\t\t\t>\r\n\t\t\t\t\t+1\r\n\t\t\t\t</span>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default TapZone\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}