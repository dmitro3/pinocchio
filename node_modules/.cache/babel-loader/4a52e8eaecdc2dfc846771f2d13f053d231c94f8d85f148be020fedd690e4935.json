{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilnaz\\\\Desktop\\\\Pinocchio\\\\pinocchio-react\\\\src\\\\components\\\\screens\\\\Main\\\\TapZone.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useRef } from 'react';\nimport goldenCoin from '../../../assets/pictures/coins/golden/coin.svg';\nimport silverCoin from '../../../assets/pictures/coins/silver/coin.svg';\nimport axiosDB from '../../../utils/axios/axiosConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tg = window.Telegram.WebApp;\nconst TapZone = ({\n  telegramId,\n  currentEnergy,\n  setCurrentEnergy,\n  energyReduction,\n  stage,\n  boostData,\n  currentCoins,\n  setCurrentCoins,\n  updateUserData\n}) => {\n  _s();\n  // Use useRef to keep track of the timeout and prevent unnecessary re-renders\n  const tapTimeout = useRef(null);\n  const latestCoins = useRef(currentCoins);\n\n  // Update the ref whenever currentCoins changes\n  latestCoins.current = currentCoins;\n\n  // Debounced function for updating user data\n  const debouncedUpdateUserData = useCallback(touches => {\n    console.log('Debounced update triggered with touches:', touches);\n    if (tapTimeout.current) {\n      console.log('Clearing previous timeout');\n      clearTimeout(tapTimeout.current);\n    }\n\n    // Set a timeout to delay the API call\n    tapTimeout.current = setTimeout(async () => {\n      console.log('Performing update request to server...');\n      if (latestCoins.current >= 1000000) {\n        console.log('User has 1,000,000 or more coins. Updating user data...');\n        updateUserData();\n      }\n      try {\n        const response = await axiosDB.put('/user/update', {\n          telegramId,\n          touches: touches || 0\n        });\n        console.log('Server response:', response.data);\n      } catch (error) {\n        console.error('Error updating user:', error);\n      }\n    }, 300); // 300 ms debounce delay\n  }, [telegramId, updateUserData]);\n  const handleTouchStart = useCallback(e => {\n    const touches = e.touches ? e.touches.length : 0; // Ensure touches is a number\n    console.log('handleTouchStart triggered with touches:', touches);\n    if (currentEnergy >= energyReduction) {\n      var _boostData$dailyBoost, _boostData$dailyBoost2;\n      console.log(`Current energy (${currentEnergy}) is sufficient for reduction (${energyReduction}).`);\n      if (tg.HapticFeedback) {\n        tg.HapticFeedback.impactOccurred('light');\n        console.log('Haptic feedback triggered');\n      }\n\n      // Handle boost data safely with nullish coalescing\n      const boostEndTime = new Date((boostData === null || boostData === void 0 ? void 0 : (_boostData$dailyBoost = boostData.dailyBoosts) === null || _boostData$dailyBoost === void 0 ? void 0 : (_boostData$dailyBoost2 = _boostData$dailyBoost[1]) === null || _boostData$dailyBoost2 === void 0 ? void 0 : _boostData$dailyBoost2.endTime) || 0);\n      const isBoostActive = boostEndTime > Date.now();\n      console.log('Boost status:', isBoostActive);\n      const energySpent = isBoostActive ? energyReduction * touches * 10 : energyReduction * touches;\n      const newEnergy = isBoostActive ? Math.max(0, currentEnergy - energySpent / 10) : Math.max(0, currentEnergy - energySpent);\n      console.log('Energy spent:', energySpent);\n      console.log('New energy level:', newEnergy);\n      setCurrentEnergy(newEnergy);\n      const updatedCoins = latestCoins.current + energySpent;\n      console.log('Updated coins:', updatedCoins);\n      setCurrentCoins(updatedCoins);\n\n      // Call the debounced function\n      debouncedUpdateUserData(touches);\n    } else {\n      console.log(`Not enough energy (${currentEnergy}) for reduction (${energyReduction}).`);\n    }\n  }, [currentEnergy, energyReduction, boostData, setCurrentEnergy, setCurrentCoins, debouncedUpdateUserData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tap-zone\",\n    onTouchStart: handleTouchStart,\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: stage === 1 ? silverCoin : goldenCoin,\n      alt: \"coin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 3\n  }, this);\n};\n_s(TapZone, \"c1Lgi3vpy0zYFHWFm5e7LBnJQ8s=\");\n_c = TapZone;\nexport default TapZone;\nvar _c;\n$RefreshReg$(_c, \"TapZone\");","map":{"version":3,"names":["React","useCallback","useRef","goldenCoin","silverCoin","axiosDB","jsxDEV","_jsxDEV","tg","window","Telegram","WebApp","TapZone","telegramId","currentEnergy","setCurrentEnergy","energyReduction","stage","boostData","currentCoins","setCurrentCoins","updateUserData","_s","tapTimeout","latestCoins","current","debouncedUpdateUserData","touches","console","log","clearTimeout","setTimeout","response","put","data","error","handleTouchStart","e","length","_boostData$dailyBoost","_boostData$dailyBoost2","HapticFeedback","impactOccurred","boostEndTime","Date","dailyBoosts","endTime","isBoostActive","now","energySpent","newEnergy","Math","max","updatedCoins","className","onTouchStart","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ilnaz/Desktop/Pinocchio/pinocchio-react/src/components/screens/Main/TapZone.jsx"],"sourcesContent":["import React, { useCallback, useRef } from 'react'\r\nimport goldenCoin from '../../../assets/pictures/coins/golden/coin.svg'\r\nimport silverCoin from '../../../assets/pictures/coins/silver/coin.svg'\r\nimport axiosDB from '../../../utils/axios/axiosConfig'\r\n\r\nconst tg = window.Telegram.WebApp\r\n\r\nconst TapZone = ({\r\n\ttelegramId,\r\n\tcurrentEnergy,\r\n\tsetCurrentEnergy,\r\n\tenergyReduction,\r\n\tstage,\r\n\tboostData,\r\n\tcurrentCoins,\r\n\tsetCurrentCoins,\r\n\tupdateUserData,\r\n}) => {\r\n\t// Use useRef to keep track of the timeout and prevent unnecessary re-renders\r\n\tconst tapTimeout = useRef(null)\r\n\tconst latestCoins = useRef(currentCoins)\r\n\r\n\t// Update the ref whenever currentCoins changes\r\n\tlatestCoins.current = currentCoins\r\n\r\n\t// Debounced function for updating user data\r\n\tconst debouncedUpdateUserData = useCallback(\r\n\t\ttouches => {\r\n\t\t\tconsole.log('Debounced update triggered with touches:', touches)\r\n\r\n\t\t\tif (tapTimeout.current) {\r\n\t\t\t\tconsole.log('Clearing previous timeout')\r\n\t\t\t\tclearTimeout(tapTimeout.current)\r\n\t\t\t}\r\n\r\n\t\t\t// Set a timeout to delay the API call\r\n\t\t\ttapTimeout.current = setTimeout(async () => {\r\n\t\t\t\tconsole.log('Performing update request to server...')\r\n\t\t\t\tif (latestCoins.current >= 1000000) {\r\n\t\t\t\t\tconsole.log('User has 1,000,000 or more coins. Updating user data...')\r\n\t\t\t\t\tupdateUserData()\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst response = await axiosDB.put('/user/update', {\r\n\t\t\t\t\t\ttelegramId,\r\n\t\t\t\t\t\ttouches: touches || 0,\r\n\t\t\t\t\t})\r\n\t\t\t\t\tconsole.log('Server response:', response.data)\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.error('Error updating user:', error)\r\n\t\t\t\t}\r\n\t\t\t}, 300) // 300 ms debounce delay\r\n\t\t},\r\n\t\t[telegramId, updateUserData]\r\n\t)\r\n\r\n\tconst handleTouchStart = useCallback(\r\n\t\te => {\r\n\t\t\tconst touches = e.touches ? e.touches.length : 0 // Ensure touches is a number\r\n\t\t\tconsole.log('handleTouchStart triggered with touches:', touches)\r\n\r\n\t\t\tif (currentEnergy >= energyReduction) {\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t`Current energy (${currentEnergy}) is sufficient for reduction (${energyReduction}).`\r\n\t\t\t\t)\r\n\r\n\t\t\t\tif (tg.HapticFeedback) {\r\n\t\t\t\t\ttg.HapticFeedback.impactOccurred('light')\r\n\t\t\t\t\tconsole.log('Haptic feedback triggered')\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Handle boost data safely with nullish coalescing\r\n\t\t\t\tconst boostEndTime = new Date(boostData?.dailyBoosts?.[1]?.endTime || 0)\r\n\t\t\t\tconst isBoostActive = boostEndTime > Date.now()\r\n\t\t\t\tconsole.log('Boost status:', isBoostActive)\r\n\r\n\t\t\t\tconst energySpent = isBoostActive\r\n\t\t\t\t\t? energyReduction * touches * 10\r\n\t\t\t\t\t: energyReduction * touches\r\n\t\t\t\tconst newEnergy = isBoostActive\r\n\t\t\t\t\t? Math.max(0, currentEnergy - energySpent / 10)\r\n\t\t\t\t\t: Math.max(0, currentEnergy - energySpent)\r\n\r\n\t\t\t\tconsole.log('Energy spent:', energySpent)\r\n\t\t\t\tconsole.log('New energy level:', newEnergy)\r\n\r\n\t\t\t\tsetCurrentEnergy(newEnergy)\r\n\r\n\t\t\t\tconst updatedCoins = latestCoins.current + energySpent\r\n\t\t\t\tconsole.log('Updated coins:', updatedCoins)\r\n\r\n\t\t\t\tsetCurrentCoins(updatedCoins)\r\n\r\n\t\t\t\t// Call the debounced function\r\n\t\t\t\tdebouncedUpdateUserData(touches)\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t`Not enough energy (${currentEnergy}) for reduction (${energyReduction}).`\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t},\r\n\t\t[\r\n\t\t\tcurrentEnergy,\r\n\t\t\tenergyReduction,\r\n\t\t\tboostData,\r\n\t\t\tsetCurrentEnergy,\r\n\t\t\tsetCurrentCoins,\r\n\t\t\tdebouncedUpdateUserData,\r\n\t\t]\r\n\t)\r\n\r\n\treturn (\r\n\t\t<div className='tap-zone' onTouchStart={handleTouchStart}>\r\n\t\t\t<img src={stage === 1 ? silverCoin : goldenCoin} alt='coin' />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default TapZone\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}