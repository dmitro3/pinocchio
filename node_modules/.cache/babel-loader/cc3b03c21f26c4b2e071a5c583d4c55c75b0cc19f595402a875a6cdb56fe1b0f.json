{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilnaz\\\\Desktop\\\\Pinocchio\\\\pinocchio-react\\\\src\\\\components\\\\screens\\\\Main\\\\TapZone.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback } from 'react';\nimport goldenCoin from '../../../assets/pictures/coins/golden/coin.svg';\nimport silverCoin from '../../../assets/pictures/coins/silver/coin.svg';\nimport axiosDB from '../../../utils/axios/axiosConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tg = window.Telegram.WebApp;\nconst TapZone = ({\n  telegramId,\n  currentEnergy,\n  setCurrentEnergy,\n  energyReduction,\n  stage,\n  soldoTaps,\n  setSoldoTaps,\n  zecchinoTaps,\n  setZecchinoTaps\n}) => {\n  _s();\n  const handleTouchStart = useCallback(async e => {\n    const touches = e.touches.length;\n    if (currentEnergy >= energyReduction) {\n      const energySpent = energyReduction * touches;\n      const newEnergy = Math.max(0, currentEnergy - energySpent);\n      setCurrentEnergy(newEnergy);\n      const updatedSoldoTaps = stage === 1 ? soldoTaps + energySpent : soldoTaps;\n      const updatedZecchinoTaps = stage !== 1 ? zecchinoTaps + energySpent : zecchinoTaps;\n      if (stage === 1) {\n        setSoldoTaps(updatedSoldoTaps);\n      } else {\n        setZecchinoTaps(updatedZecchinoTaps);\n      }\n      try {\n        const response = await axiosDB.put('/user/update', {\n          telegramId,\n          energy: newEnergy,\n          soldoTaps: updatedSoldoTaps,\n          zecchinoTaps: updatedZecchinoTaps\n        });\n\n        // Фактическое обновление состояния после успешного ответа\n        setCurrentEnergy(response.data.energy);\n        setSoldoTaps(response.data.soldoTaps);\n        setZecchinoTaps(response.data.zecchinoTaps);\n      } catch (error) {\n        console.error('Error updating user:', error);\n        // В случае ошибки можно добавить логику для отката изменений на клиенте\n      }\n      if (tg.HapticFeedback) {\n        tg.HapticFeedback.impactOccurred('light');\n      }\n    }\n  }, [telegramId, currentEnergy, setCurrentEnergy, energyReduction, stage, soldoTaps, setSoldoTaps, zecchinoTaps, setZecchinoTaps]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tap-zone\",\n    onTouchStart: handleTouchStart,\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: stage === 1 ? silverCoin : goldenCoin,\n      alt: \"coin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 3\n  }, this);\n};\n_s(TapZone, \"umk88l/kBZbzjaXwIE2iERZCATg=\");\n_c = TapZone;\nexport default TapZone;\nvar _c;\n$RefreshReg$(_c, \"TapZone\");","map":{"version":3,"names":["React","useCallback","goldenCoin","silverCoin","axiosDB","jsxDEV","_jsxDEV","tg","window","Telegram","WebApp","TapZone","telegramId","currentEnergy","setCurrentEnergy","energyReduction","stage","soldoTaps","setSoldoTaps","zecchinoTaps","setZecchinoTaps","_s","handleTouchStart","e","touches","length","energySpent","newEnergy","Math","max","updatedSoldoTaps","updatedZecchinoTaps","response","put","energy","data","error","console","HapticFeedback","impactOccurred","className","onTouchStart","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ilnaz/Desktop/Pinocchio/pinocchio-react/src/components/screens/Main/TapZone.jsx"],"sourcesContent":["import React, { useCallback } from 'react'\r\nimport goldenCoin from '../../../assets/pictures/coins/golden/coin.svg'\r\nimport silverCoin from '../../../assets/pictures/coins/silver/coin.svg'\r\nimport axiosDB from '../../../utils/axios/axiosConfig'\r\n\r\nconst tg = window.Telegram.WebApp\r\n\r\nconst TapZone = ({\r\n\ttelegramId,\r\n\tcurrentEnergy,\r\n\tsetCurrentEnergy,\r\n\tenergyReduction,\r\n\tstage,\r\n\tsoldoTaps,\r\n\tsetSoldoTaps,\r\n\tzecchinoTaps,\r\n\tsetZecchinoTaps,\r\n}) => {\r\n\tconst handleTouchStart = useCallback(\r\n\t\tasync e => {\r\n\t\t\tconst touches = e.touches.length\r\n\t\t\tif (currentEnergy >= energyReduction) {\r\n\t\t\t\tconst energySpent = energyReduction * touches\r\n\t\t\t\tconst newEnergy = Math.max(0, currentEnergy - energySpent)\r\n\t\t\t\tsetCurrentEnergy(newEnergy)\r\n\r\n\t\t\t\tconst updatedSoldoTaps =\r\n\t\t\t\t\tstage === 1 ? soldoTaps + energySpent : soldoTaps\r\n\t\t\t\tconst updatedZecchinoTaps =\r\n\t\t\t\t\tstage !== 1 ? zecchinoTaps + energySpent : zecchinoTaps\r\n\r\n\t\t\t\tif (stage === 1) {\r\n\t\t\t\t\tsetSoldoTaps(updatedSoldoTaps)\r\n\t\t\t\t} else {\r\n\t\t\t\t\tsetZecchinoTaps(updatedZecchinoTaps)\r\n\t\t\t\t}\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst response = await axiosDB.put('/user/update', {\r\n\t\t\t\t\t\ttelegramId,\r\n\t\t\t\t\t\tenergy: newEnergy,\r\n\t\t\t\t\t\tsoldoTaps: updatedSoldoTaps,\r\n\t\t\t\t\t\tzecchinoTaps: updatedZecchinoTaps,\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\t// Фактическое обновление состояния после успешного ответа\r\n\t\t\t\t\tsetCurrentEnergy(response.data.energy)\r\n\t\t\t\t\tsetSoldoTaps(response.data.soldoTaps)\r\n\t\t\t\t\tsetZecchinoTaps(response.data.zecchinoTaps)\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.error('Error updating user:', error)\r\n\t\t\t\t\t// В случае ошибки можно добавить логику для отката изменений на клиенте\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (tg.HapticFeedback) {\r\n\t\t\t\t\ttg.HapticFeedback.impactOccurred('light')\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t[\r\n\t\t\ttelegramId,\r\n\t\t\tcurrentEnergy,\r\n\t\t\tsetCurrentEnergy,\r\n\t\t\tenergyReduction,\r\n\t\t\tstage,\r\n\t\t\tsoldoTaps,\r\n\t\t\tsetSoldoTaps,\r\n\t\t\tzecchinoTaps,\r\n\t\t\tsetZecchinoTaps,\r\n\t\t]\r\n\t)\r\n\r\n\treturn (\r\n\t\t<div className='tap-zone' onTouchStart={handleTouchStart}>\r\n\t\t\t<img src={stage === 1 ? silverCoin : goldenCoin} alt='coin' />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default TapZone\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,QAAQ,OAAO;AAC1C,OAAOC,UAAU,MAAM,gDAAgD;AACvE,OAAOC,UAAU,MAAM,gDAAgD;AACvE,OAAOC,OAAO,MAAM,kCAAkC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,EAAE,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM;AAEjC,MAAMC,OAAO,GAAGA,CAAC;EAChBC,UAAU;EACVC,aAAa;EACbC,gBAAgB;EAChBC,eAAe;EACfC,KAAK;EACLC,SAAS;EACTC,YAAY;EACZC,YAAY;EACZC;AACD,CAAC,KAAK;EAAAC,EAAA;EACL,MAAMC,gBAAgB,GAAGrB,WAAW,CACnC,MAAMsB,CAAC,IAAI;IACV,MAAMC,OAAO,GAAGD,CAAC,CAACC,OAAO,CAACC,MAAM;IAChC,IAAIZ,aAAa,IAAIE,eAAe,EAAE;MACrC,MAAMW,WAAW,GAAGX,eAAe,GAAGS,OAAO;MAC7C,MAAMG,SAAS,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEhB,aAAa,GAAGa,WAAW,CAAC;MAC1DZ,gBAAgB,CAACa,SAAS,CAAC;MAE3B,MAAMG,gBAAgB,GACrBd,KAAK,KAAK,CAAC,GAAGC,SAAS,GAAGS,WAAW,GAAGT,SAAS;MAClD,MAAMc,mBAAmB,GACxBf,KAAK,KAAK,CAAC,GAAGG,YAAY,GAAGO,WAAW,GAAGP,YAAY;MAExD,IAAIH,KAAK,KAAK,CAAC,EAAE;QAChBE,YAAY,CAACY,gBAAgB,CAAC;MAC/B,CAAC,MAAM;QACNV,eAAe,CAACW,mBAAmB,CAAC;MACrC;MAEA,IAAI;QACH,MAAMC,QAAQ,GAAG,MAAM5B,OAAO,CAAC6B,GAAG,CAAC,cAAc,EAAE;UAClDrB,UAAU;UACVsB,MAAM,EAAEP,SAAS;UACjBV,SAAS,EAAEa,gBAAgB;UAC3BX,YAAY,EAAEY;QACf,CAAC,CAAC;;QAEF;QACAjB,gBAAgB,CAACkB,QAAQ,CAACG,IAAI,CAACD,MAAM,CAAC;QACtChB,YAAY,CAACc,QAAQ,CAACG,IAAI,CAAClB,SAAS,CAAC;QACrCG,eAAe,CAACY,QAAQ,CAACG,IAAI,CAAChB,YAAY,CAAC;MAC5C,CAAC,CAAC,OAAOiB,KAAK,EAAE;QACfC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C;MACD;MAEA,IAAI7B,EAAE,CAAC+B,cAAc,EAAE;QACtB/B,EAAE,CAAC+B,cAAc,CAACC,cAAc,CAAC,OAAO,CAAC;MAC1C;IACD;EACD,CAAC,EACD,CACC3B,UAAU,EACVC,aAAa,EACbC,gBAAgB,EAChBC,eAAe,EACfC,KAAK,EACLC,SAAS,EACTC,YAAY,EACZC,YAAY,EACZC,eAAe,CAEjB,CAAC;EAED,oBACCd,OAAA;IAAKkC,SAAS,EAAC,UAAU;IAACC,YAAY,EAAEnB,gBAAiB;IAAAoB,QAAA,eACxDpC,OAAA;MAAKqC,GAAG,EAAE3B,KAAK,KAAK,CAAC,GAAGb,UAAU,GAAGD,UAAW;MAAC0C,GAAG,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAER,CAAC;AAAA3B,EAAA,CAtEKV,OAAO;AAAAsC,EAAA,GAAPtC,OAAO;AAwEb,eAAeA,OAAO;AAAA,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}