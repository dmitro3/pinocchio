{"ast":null,"code":"import axiosDB from '../../../../utils/axios/axiosConfig';\nexport const calculateTimeLeft = (endTime, startTime, lastUsed, usesToday, level) => {\n  const now = Date.now();\n  const endTimeDate = new Date(endTime);\n  const lastUsedDate = new Date(lastUsed);\n  const isActive = endTimeDate > now;\n  if (isActive) {\n    const difference = endTimeDate - now;\n    return {\n      hours: Math.floor(difference / (1000 * 60 * 60)),\n      minutes: Math.floor(difference / (1000 * 60) % 60),\n      isActive: true\n    };\n  } else if (usesToday >= level && lastUsedDate) {\n    const timeToReset = 24 * 60 * 60 * 1000 - (now - lastUsedDate);\n    return {\n      hours: Math.floor(timeToReset / (1000 * 60 * 60)),\n      minutes: Math.floor(timeToReset / (1000 * 60) % 60),\n      isActive: false\n    };\n  } else {\n    return {\n      hours: 0,\n      minutes: 0,\n      isActive: false\n    };\n  }\n};\nexport const formatTimeLeft = timeLeft => {\n  return `${String(timeLeft.hours).padStart(2, '0')}:${String(timeLeft.minutes).padStart(2, '0')}`;\n};\nexport const fetchUserData = async (telegramId, setBoostData, setUserData, setLoading) => {\n  try {\n    const response = await axiosDB.get(`/boost/${telegramId}`);\n    setBoostData(response.data.userData[0].boosts);\n    setUserData(response.data.userData[0]);\n  } catch (error) {\n    console.error('Failed to fetch boost data:', error);\n  } finally {\n    setLoading(false);\n  }\n};\nexport const updateBoostData = async (telegramId, setBoostData, setUserData) => {\n  try {\n    const response = await axiosDB.get(`/boost/${telegramId}`);\n    setBoostData(response.data.userData[0].boosts);\n    setUserData(response.data.userData[0]);\n  } catch (error) {\n    console.error('Failed to fetch updated boost data:', error);\n  }\n};","map":{"version":3,"names":["axiosDB","calculateTimeLeft","endTime","startTime","lastUsed","usesToday","level","now","Date","endTimeDate","lastUsedDate","isActive","difference","hours","Math","floor","minutes","timeToReset","formatTimeLeft","timeLeft","String","padStart","fetchUserData","telegramId","setBoostData","setUserData","setLoading","response","get","data","userData","boosts","error","console","updateBoostData"],"sources":["C:/Users/ilnaz/Desktop/Pinocchio/pinocchio-react/src/components/screens/Boosts/Utils/helpers.js"],"sourcesContent":["import axiosDB from '../../../../utils/axios/axiosConfig'\r\n\r\nexport const calculateTimeLeft = (\r\n\tendTime,\r\n\tstartTime,\r\n\tlastUsed,\r\n\tusesToday,\r\n\tlevel\r\n) => {\r\n\tconst now = Date.now()\r\n\tconst endTimeDate = new Date(endTime)\r\n\tconst lastUsedDate = new Date(lastUsed)\r\n\tconst isActive = endTimeDate > now\r\n\r\n\tif (isActive) {\r\n\t\tconst difference = endTimeDate - now\r\n\t\treturn {\r\n\t\t\thours: Math.floor(difference / (1000 * 60 * 60)),\r\n\t\t\tminutes: Math.floor((difference / (1000 * 60)) % 60),\r\n\t\t\tisActive: true,\r\n\t\t}\r\n\t} else if (usesToday >= level && lastUsedDate) {\r\n\t\tconst timeToReset = 24 * 60 * 60 * 1000 - (now - lastUsedDate)\r\n\t\treturn {\r\n\t\t\thours: Math.floor(timeToReset / (1000 * 60 * 60)),\r\n\t\t\tminutes: Math.floor((timeToReset / (1000 * 60)) % 60),\r\n\t\t\tisActive: false,\r\n\t\t}\r\n\t} else {\r\n\t\treturn {\r\n\t\t\thours: 0,\r\n\t\t\tminutes: 0,\r\n\t\t\tisActive: false,\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport const formatTimeLeft = timeLeft => {\r\n\treturn `${String(timeLeft.hours).padStart(2, '0')}:${String(\r\n\t\ttimeLeft.minutes\r\n\t).padStart(2, '0')}`\r\n}\r\n\r\nexport const fetchUserData = async (\r\n\ttelegramId,\r\n\tsetBoostData,\r\n\tsetUserData,\r\n\tsetLoading\r\n) => {\r\n\ttry {\r\n\t\tconst response = await axiosDB.get(`/boost/${telegramId}`)\r\n\t\tsetBoostData(response.data.userData[0].boosts)\r\n\t\tsetUserData(response.data.userData[0])\r\n\t} catch (error) {\r\n\t\tconsole.error('Failed to fetch boost data:', error)\r\n\t} finally {\r\n\t\tsetLoading(false)\r\n\t}\r\n}\r\n\r\nexport const updateBoostData = async (\r\n\ttelegramId,\r\n\tsetBoostData,\r\n\tsetUserData\r\n) => {\r\n\ttry {\r\n\t\tconst response = await axiosDB.get(`/boost/${telegramId}`)\r\n\t\tsetBoostData(response.data.userData[0].boosts)\r\n\t\tsetUserData(response.data.userData[0])\r\n\t} catch (error) {\r\n\t\tconsole.error('Failed to fetch updated boost data:', error)\r\n\t}\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}