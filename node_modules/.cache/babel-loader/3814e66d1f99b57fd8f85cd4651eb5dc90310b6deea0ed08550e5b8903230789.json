{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilnaz\\\\Desktop\\\\Pinocchio\\\\pinocchio-react\\\\src\\\\components\\\\screens\\\\Main\\\\TapZone.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback } from 'react';\nimport goldenCoin from '../../../assets/pictures/coins/golden/coin.svg';\nimport silverCoin from '../../../assets/pictures/coins/silver/coin.svg';\nimport axiosDB from '../../../utils/axios/axiosConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tg = window.Telegram.WebApp;\nconst TapZone = ({\n  // TODO: Переписать логику. Мы не должны брать тапы с клиента, тапы будут обрабатываться на сервере\n  telegramId,\n  currentEnergy,\n  setCurrentEnergy,\n  energyReduction,\n  stage,\n  boostData,\n  currentCoins,\n  setCurrentCoins,\n  updateUserData\n}) => {\n  _s();\n  if (currentCoins === 1000000 || currentCoins > 1000000) {\n    updateUserData();\n  }\n  console.log(boostData);\n  const handleTouchStart = useCallback(async e => {\n    const touches = e.touches.length;\n    if (currentEnergy >= energyReduction) {\n      const energySpent = new Date(boostData.dailyBoosts[1].endTime) > Date.now() ? energyReduction * touches * 10 : energyReduction * touches;\n      const newEnergy = new Date(boostData.dailyBoosts[1].endTime) > Date.now() ? Math.max(0, currentEnergy - energySpent / 10) : Math.max(0, currentEnergy - energySpent);\n      console.log(energySpent);\n      setCurrentEnergy(newEnergy);\n      const updatedCoins = currentCoins + energySpent;\n      setCurrentCoins(updatedCoins); // Оптимистическое обновление на клиенте\n      try {\n        const response = await axiosDB.put('/user/update', {\n          // TODO: ИСПРАВИТЬ\n          telegramId,\n          ...{\n            touches\n          }\n        });\n      } catch (error) {\n        console.error('Error updating user:', error);\n        // В случае ошибки можно добавить логику для отката изменений на клиенте\n      }\n      if (tg.HapticFeedback) {\n        tg.HapticFeedback.impactOccurred('light');\n      }\n    }\n  }, [telegramId, currentEnergy, setCurrentEnergy, energyReduction, stage, currentCoins, setCurrentCoins]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tap-zone\",\n    onTouchStart: handleTouchStart,\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: stage === 1 ? silverCoin : goldenCoin,\n      alt: \"coin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 3\n  }, this);\n};\n_s(TapZone, \"umk88l/kBZbzjaXwIE2iERZCATg=\");\n_c = TapZone;\nexport default TapZone;\nvar _c;\n$RefreshReg$(_c, \"TapZone\");","map":{"version":3,"names":["React","useCallback","goldenCoin","silverCoin","axiosDB","jsxDEV","_jsxDEV","tg","window","Telegram","WebApp","TapZone","telegramId","currentEnergy","setCurrentEnergy","energyReduction","stage","boostData","currentCoins","setCurrentCoins","updateUserData","_s","console","log","handleTouchStart","e","touches","length","energySpent","Date","dailyBoosts","endTime","now","newEnergy","Math","max","updatedCoins","response","put","error","HapticFeedback","impactOccurred","className","onTouchStart","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ilnaz/Desktop/Pinocchio/pinocchio-react/src/components/screens/Main/TapZone.jsx"],"sourcesContent":["import React, { useCallback } from 'react'\r\nimport goldenCoin from '../../../assets/pictures/coins/golden/coin.svg'\r\nimport silverCoin from '../../../assets/pictures/coins/silver/coin.svg'\r\nimport axiosDB from '../../../utils/axios/axiosConfig'\r\n\r\nconst tg = window.Telegram.WebApp\r\n\r\nconst TapZone = ({\r\n\t// TODO: Переписать логику. Мы не должны брать тапы с клиента, тапы будут обрабатываться на сервере\r\n\ttelegramId,\r\n\tcurrentEnergy,\r\n\tsetCurrentEnergy,\r\n\tenergyReduction,\r\n\tstage,\r\n\tboostData,\r\n\tcurrentCoins,\r\n\tsetCurrentCoins,\r\n\tupdateUserData,\r\n}) => {\r\n\tif (currentCoins === 1000000 || currentCoins > 1000000) {\r\n\t\tupdateUserData()\r\n\t}\r\n\tconsole.log(boostData)\r\n\tconst handleTouchStart = useCallback(\r\n\t\tasync e => {\r\n\t\t\tconst touches = e.touches.length\r\n\t\t\tif (currentEnergy >= energyReduction) {\r\n\t\t\t\tconst energySpent =\r\n\t\t\t\t\tnew Date(boostData.dailyBoosts[1].endTime) > Date.now()\r\n\t\t\t\t\t\t? energyReduction * touches * 10\r\n\t\t\t\t\t\t: energyReduction * touches\r\n\t\t\t\tconst newEnergy =\r\n\t\t\t\t\tnew Date(boostData.dailyBoosts[1].endTime) > Date.now()\r\n\t\t\t\t\t\t? Math.max(0, currentEnergy - energySpent / 10)\r\n\t\t\t\t\t\t: Math.max(0, currentEnergy - energySpent)\r\n\t\t\t\tconsole.log(energySpent)\r\n\t\t\t\tsetCurrentEnergy(newEnergy)\r\n\r\n\t\t\t\tconst updatedCoins = currentCoins + energySpent\r\n\t\t\t\tsetCurrentCoins(updatedCoins) // Оптимистическое обновление на клиенте\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst response = await axiosDB.put('/user/update', {\r\n\t\t\t\t\t\t// TODO: ИСПРАВИТЬ\r\n\t\t\t\t\t\ttelegramId,\r\n\t\t\t\t\t\t...{ touches },\r\n\t\t\t\t\t})\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.error('Error updating user:', error)\r\n\t\t\t\t\t// В случае ошибки можно добавить логику для отката изменений на клиенте\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (tg.HapticFeedback) {\r\n\t\t\t\t\ttg.HapticFeedback.impactOccurred('light')\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t[\r\n\t\t\ttelegramId,\r\n\t\t\tcurrentEnergy,\r\n\t\t\tsetCurrentEnergy,\r\n\t\t\tenergyReduction,\r\n\t\t\tstage,\r\n\t\t\tcurrentCoins,\r\n\t\t\tsetCurrentCoins,\r\n\t\t]\r\n\t)\r\n\r\n\treturn (\r\n\t\t<div className='tap-zone' onTouchStart={handleTouchStart}>\r\n\t\t\t<img src={stage === 1 ? silverCoin : goldenCoin} alt='coin' />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default TapZone\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}