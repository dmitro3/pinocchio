{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilnaz\\\\Desktop\\\\Pinocchio\\\\pinocchio-react\\\\src\\\\components\\\\screens\\\\Main\\\\TapZone.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useRef, useState } from 'react';\nimport goldenCoin from '../../../assets/pictures/coins/golden/coin.svg';\nimport silverCoin from '../../../assets/pictures/coins/silver/coin.svg';\nimport axiosDB from '../../../utils/axios/axiosConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tg = window.Telegram.WebApp;\nconst TapZone = ({\n  telegramId,\n  currentEnergy,\n  setCurrentEnergy,\n  energyReduction,\n  stage,\n  boostData,\n  currentCoins,\n  setCurrentCoins,\n  updateUserData\n}) => {\n  _s();\n  // Use useRef to keep track of the timeout and prevent unnecessary re-renders\n  const tapTimeout = useRef(null);\n  const latestCoins = useRef(currentCoins);\n\n  // State for storing all taps\n  const [totalTaps, setTotalTaps] = useState(0);\n  const pendingTaps = useRef(0);\n\n  // Update the ref whenever currentCoins changes\n  latestCoins.current = currentCoins;\n\n  // Debounced function for updating user data\n  const debouncedUpdateUserData = useCallback(() => {\n    console.log('Debounced update triggered with pending taps:', pendingTaps.current);\n    if (tapTimeout.current) {\n      console.log('Clearing previous timeout');\n      clearTimeout(tapTimeout.current);\n    }\n\n    // Set a timeout to delay the API call\n    tapTimeout.current = setTimeout(async () => {\n      console.log('Performing update request to server...');\n      if (latestCoins.current >= 1000000) {\n        console.log('User has 1,000,000 or more coins. Updating user data...');\n        updateUserData();\n      }\n      try {\n        const touchesToSend = pendingTaps.current;\n        const response = await axiosDB.put('/user/update', {\n          telegramId,\n          touches: touchesToSend\n        });\n        console.log('Server response:', response.data);\n\n        // Reset taps after successful send\n        pendingTaps.current = 0;\n        setTotalTaps(0);\n      } catch (error) {\n        console.error('Error updating user:', error);\n      }\n    }, 300); // 300 ms debounce delay\n  }, [telegramId, updateUserData]);\n  const handleTouchStart = useCallback(e => {\n    const touches = e.touches ? e.touches.length : 0;\n    console.log('handleTouchStart triggered with touches:', touches);\n    if (currentEnergy >= energyReduction) {\n      var _boostData$dailyBoost, _boostData$dailyBoost2;\n      console.log(`Current energy (${currentEnergy}) is sufficient for reduction (${energyReduction}).`);\n      if (tg.HapticFeedback) {\n        tg.HapticFeedback.impactOccurred('light');\n        console.log('Haptic feedback triggered');\n      }\n\n      // Handle boost data safely with nullish coalescing\n      const boostEndTime = new Date((boostData === null || boostData === void 0 ? void 0 : (_boostData$dailyBoost = boostData.dailyBoosts) === null || _boostData$dailyBoost === void 0 ? void 0 : (_boostData$dailyBoost2 = _boostData$dailyBoost[1]) === null || _boostData$dailyBoost2 === void 0 ? void 0 : _boostData$dailyBoost2.endTime) || 0);\n      const isBoostActive = boostEndTime > Date.now();\n      console.log('Boost status:', isBoostActive);\n      const energySpent = isBoostActive ? energyReduction * touches * 10 : energyReduction * touches;\n      const newEnergy = isBoostActive ? Math.max(0, currentEnergy - energySpent / 10) : Math.max(0, currentEnergy - energySpent);\n      console.log('Energy spent:', energySpent);\n      console.log('New energy level:', newEnergy);\n      setCurrentEnergy(newEnergy);\n      const updatedCoins = latestCoins.current + energySpent;\n      console.log('Updated coins:', updatedCoins);\n      setCurrentCoins(updatedCoins);\n\n      // Accumulate the taps\n      pendingTaps.current += touches;\n      setTotalTaps(prev => prev + touches);\n\n      // Call the debounced function\n      debouncedUpdateUserData();\n    } else {\n      console.log(`Not enough energy (${currentEnergy}) for reduction (${energyReduction}).`);\n    }\n  }, [currentEnergy, energyReduction, boostData, setCurrentEnergy, setCurrentCoins, debouncedUpdateUserData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tap-zone\",\n    onTouchStart: handleTouchStart,\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: stage === 1 ? silverCoin : goldenCoin,\n      alt: \"coin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 3\n  }, this);\n};\n_s(TapZone, \"xwig8uwZvh2dNaFRFM6e2iBjwyE=\");\n_c = TapZone;\nexport default TapZone;\nvar _c;\n$RefreshReg$(_c, \"TapZone\");","map":{"version":3,"names":["React","useCallback","useRef","useState","goldenCoin","silverCoin","axiosDB","jsxDEV","_jsxDEV","tg","window","Telegram","WebApp","TapZone","telegramId","currentEnergy","setCurrentEnergy","energyReduction","stage","boostData","currentCoins","setCurrentCoins","updateUserData","_s","tapTimeout","latestCoins","totalTaps","setTotalTaps","pendingTaps","current","debouncedUpdateUserData","console","log","clearTimeout","setTimeout","touchesToSend","response","put","touches","data","error","handleTouchStart","e","length","_boostData$dailyBoost","_boostData$dailyBoost2","HapticFeedback","impactOccurred","boostEndTime","Date","dailyBoosts","endTime","isBoostActive","now","energySpent","newEnergy","Math","max","updatedCoins","prev","className","onTouchStart","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ilnaz/Desktop/Pinocchio/pinocchio-react/src/components/screens/Main/TapZone.jsx"],"sourcesContent":["import React, { useCallback, useRef, useState } from 'react'\r\nimport goldenCoin from '../../../assets/pictures/coins/golden/coin.svg'\r\nimport silverCoin from '../../../assets/pictures/coins/silver/coin.svg'\r\nimport axiosDB from '../../../utils/axios/axiosConfig'\r\n\r\nconst tg = window.Telegram.WebApp\r\n\r\nconst TapZone = ({\r\n\ttelegramId,\r\n\tcurrentEnergy,\r\n\tsetCurrentEnergy,\r\n\tenergyReduction,\r\n\tstage,\r\n\tboostData,\r\n\tcurrentCoins,\r\n\tsetCurrentCoins,\r\n\tupdateUserData,\r\n}) => {\r\n\t// Use useRef to keep track of the timeout and prevent unnecessary re-renders\r\n\tconst tapTimeout = useRef(null)\r\n\tconst latestCoins = useRef(currentCoins)\r\n\r\n\t// State for storing all taps\r\n\tconst [totalTaps, setTotalTaps] = useState(0)\r\n\tconst pendingTaps = useRef(0)\r\n\r\n\t// Update the ref whenever currentCoins changes\r\n\tlatestCoins.current = currentCoins\r\n\r\n\t// Debounced function for updating user data\r\n\tconst debouncedUpdateUserData = useCallback(() => {\r\n\t\tconsole.log(\r\n\t\t\t'Debounced update triggered with pending taps:',\r\n\t\t\tpendingTaps.current\r\n\t\t)\r\n\r\n\t\tif (tapTimeout.current) {\r\n\t\t\tconsole.log('Clearing previous timeout')\r\n\t\t\tclearTimeout(tapTimeout.current)\r\n\t\t}\r\n\r\n\t\t// Set a timeout to delay the API call\r\n\t\ttapTimeout.current = setTimeout(async () => {\r\n\t\t\tconsole.log('Performing update request to server...')\r\n\t\t\tif (latestCoins.current >= 1000000) {\r\n\t\t\t\tconsole.log('User has 1,000,000 or more coins. Updating user data...')\r\n\t\t\t\tupdateUserData()\r\n\t\t\t}\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst touchesToSend = pendingTaps.current\r\n\t\t\t\tconst response = await axiosDB.put('/user/update', {\r\n\t\t\t\t\ttelegramId,\r\n\t\t\t\t\ttouches: touchesToSend,\r\n\t\t\t\t})\r\n\t\t\t\tconsole.log('Server response:', response.data)\r\n\r\n\t\t\t\t// Reset taps after successful send\r\n\t\t\t\tpendingTaps.current = 0\r\n\t\t\t\tsetTotalTaps(0)\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error('Error updating user:', error)\r\n\t\t\t}\r\n\t\t}, 300) // 300 ms debounce delay\r\n\t}, [telegramId, updateUserData])\r\n\r\n\tconst handleTouchStart = useCallback(\r\n\t\te => {\r\n\t\t\tconst touches = e.touches ? e.touches.length : 0\r\n\t\t\tconsole.log('handleTouchStart triggered with touches:', touches)\r\n\r\n\t\t\tif (currentEnergy >= energyReduction) {\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t`Current energy (${currentEnergy}) is sufficient for reduction (${energyReduction}).`\r\n\t\t\t\t)\r\n\r\n\t\t\t\tif (tg.HapticFeedback) {\r\n\t\t\t\t\ttg.HapticFeedback.impactOccurred('light')\r\n\t\t\t\t\tconsole.log('Haptic feedback triggered')\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Handle boost data safely with nullish coalescing\r\n\t\t\t\tconst boostEndTime = new Date(boostData?.dailyBoosts?.[1]?.endTime || 0)\r\n\t\t\t\tconst isBoostActive = boostEndTime > Date.now()\r\n\t\t\t\tconsole.log('Boost status:', isBoostActive)\r\n\r\n\t\t\t\tconst energySpent = isBoostActive\r\n\t\t\t\t\t? energyReduction * touches * 10\r\n\t\t\t\t\t: energyReduction * touches\r\n\t\t\t\tconst newEnergy = isBoostActive\r\n\t\t\t\t\t? Math.max(0, currentEnergy - energySpent / 10)\r\n\t\t\t\t\t: Math.max(0, currentEnergy - energySpent)\r\n\r\n\t\t\t\tconsole.log('Energy spent:', energySpent)\r\n\t\t\t\tconsole.log('New energy level:', newEnergy)\r\n\r\n\t\t\t\tsetCurrentEnergy(newEnergy)\r\n\r\n\t\t\t\tconst updatedCoins = latestCoins.current + energySpent\r\n\t\t\t\tconsole.log('Updated coins:', updatedCoins)\r\n\r\n\t\t\t\tsetCurrentCoins(updatedCoins)\r\n\r\n\t\t\t\t// Accumulate the taps\r\n\t\t\t\tpendingTaps.current += touches\r\n\t\t\t\tsetTotalTaps(prev => prev + touches)\r\n\r\n\t\t\t\t// Call the debounced function\r\n\t\t\t\tdebouncedUpdateUserData()\r\n\t\t\t} else {\r\n\t\t\t\tconsole.log(\r\n\t\t\t\t\t`Not enough energy (${currentEnergy}) for reduction (${energyReduction}).`\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t},\r\n\t\t[\r\n\t\t\tcurrentEnergy,\r\n\t\t\tenergyReduction,\r\n\t\t\tboostData,\r\n\t\t\tsetCurrentEnergy,\r\n\t\t\tsetCurrentCoins,\r\n\t\t\tdebouncedUpdateUserData,\r\n\t\t]\r\n\t)\r\n\r\n\treturn (\r\n\t\t<div className='tap-zone' onTouchStart={handleTouchStart}>\r\n\t\t\t<img src={stage === 1 ? silverCoin : goldenCoin} alt='coin' />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default TapZone\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}