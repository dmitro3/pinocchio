{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilnaz\\\\Desktop\\\\Pinocchio\\\\pinocchio-react\\\\src\\\\components\\\\screens\\\\Tasks\\\\Tasks.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axiosDB from '../../../utils/axios/axiosConfig';\nimport Loading from '../Loading/Loading';\nimport './Tasks.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tasks = () => {\n  _s();\n  const [taskData, setTaskData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const telegramId = '1145622789';\n  useEffect(() => {\n    const getTasks = async () => {\n      try {\n        const tasksList = await axiosDB.get(`/tasks/${telegramId}`);\n        setTaskData(tasksList.data.incompleteTasks);\n        console.log('TASKDATA: ' + JSON.stringify(tasksList.data, null, 2));\n      } catch (error) {\n        console.log(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getTasks();\n  }, [telegramId]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 10\n    }, this);\n  }\n  /*\r\n  return (\r\n  \t<div className='container'>\r\n  \t\t<h1 className='main-title'>tasks</h1>\r\n  \t\t<div className='tasks-content'>\r\n  \t\t\t{taskData.map((task, index) => (\r\n  \t\t\t\t<div key={index} id='task-container'>\r\n  \t\t\t\t\t<div className='block tasks'>\r\n  \t\t\t\t\t\t<div className='task'>\r\n  \t\t\t\t\t\t\t<div id='task-block'>\r\n  \t\t\t\t\t\t\t\t<div className='task-logo'></div>\r\n  \t\t\t\t\t\t\t\t<div id='task-info'>\r\n  \t\t\t\t\t\t\t\t\t<p id='name'>{task.name}</p>\r\n  \t\t\t\t\t\t\t\t\t<p id='reward'>{task.reward}</p>\r\n  \t\t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t</div>\r\n  \t\t\t\t\t\t\t<div className='row icon'></div>\r\n  \t\t\t\t\t\t</div>\r\n  \t\t\t\t\t</div>\r\n  \t\t\t\t</div>\r\n  \t\t\t))}\r\n  \t\t</div>\r\n  \t\t<Navigation />\r\n  \t</div>\r\n  )\r\n  \t*/\n};\n_s(Tasks, \"R6oOZJ7cNucLk6c7MPoxUkBdO1c=\");\n_c = Tasks;\nexport default Tasks;\nvar _c;\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"names":["React","useEffect","useState","axiosDB","Loading","jsxDEV","_jsxDEV","Tasks","_s","taskData","setTaskData","loading","setLoading","telegramId","getTasks","tasksList","get","data","incompleteTasks","console","log","JSON","stringify","error","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ilnaz/Desktop/Pinocchio/pinocchio-react/src/components/screens/Tasks/Tasks.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport axiosDB from '../../../utils/axios/axiosConfig'\r\nimport Loading from '../Loading/Loading'\r\nimport './Tasks.css'\r\n\r\nconst Tasks = () => {\r\n\tconst [taskData, setTaskData] = useState([])\r\n\tconst [loading, setLoading] = useState(true)\r\n\r\n\tconst telegramId = '1145622789'\r\n\tuseEffect(() => {\r\n\t\tconst getTasks = async () => {\r\n\t\t\ttry {\r\n\t\t\t\tconst tasksList = await axiosDB.get(`/tasks/${telegramId}`)\r\n\t\t\t\tsetTaskData(tasksList.data.incompleteTasks)\r\n\t\t\t\tconsole.log('TASKDATA: ' + JSON.stringify(tasksList.data, null, 2))\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(error)\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoading(false)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tgetTasks()\r\n\t}, [telegramId])\r\n\r\n\tif (loading) {\r\n\t\treturn <Loading />\r\n\t}\r\n\t/*\r\n\treturn (\r\n\t\t<div className='container'>\r\n\t\t\t<h1 className='main-title'>tasks</h1>\r\n\t\t\t<div className='tasks-content'>\r\n\t\t\t\t{taskData.map((task, index) => (\r\n\t\t\t\t\t<div key={index} id='task-container'>\r\n\t\t\t\t\t\t<div className='block tasks'>\r\n\t\t\t\t\t\t\t<div className='task'>\r\n\t\t\t\t\t\t\t\t<div id='task-block'>\r\n\t\t\t\t\t\t\t\t\t<div className='task-logo'></div>\r\n\t\t\t\t\t\t\t\t\t<div id='task-info'>\r\n\t\t\t\t\t\t\t\t\t\t<p id='name'>{task.name}</p>\r\n\t\t\t\t\t\t\t\t\t\t<p id='reward'>{task.reward}</p>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className='row icon'></div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t))}\r\n\t\t\t</div>\r\n\t\t\t<Navigation />\r\n\t\t</div>\r\n\t)\r\n\t\t*/\r\n}\r\n\r\nexport default Tasks\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,OAAO,MAAM,kCAAkC;AACtD,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAO,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE5C,MAAMW,UAAU,GAAG,YAAY;EAC/BZ,SAAS,CAAC,MAAM;IACf,MAAMa,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACH,MAAMC,SAAS,GAAG,MAAMZ,OAAO,CAACa,GAAG,CAAC,UAAUH,UAAU,EAAE,CAAC;QAC3DH,WAAW,CAACK,SAAS,CAACE,IAAI,CAACC,eAAe,CAAC;QAC3CC,OAAO,CAACC,GAAG,CAAC,YAAY,GAAGC,IAAI,CAACC,SAAS,CAACP,SAAS,CAACE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;MACpE,CAAC,CAAC,OAAOM,KAAK,EAAE;QACfJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;MACnB,CAAC,SAAS;QACTX,UAAU,CAAC,KAAK,CAAC;MAClB;IACD,CAAC;IAEDE,QAAQ,CAAC,CAAC;EACX,CAAC,EAAE,CAACD,UAAU,CAAC,CAAC;EAEhB,IAAIF,OAAO,EAAE;IACZ,oBAAOL,OAAA,CAACF,OAAO;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACnB;EACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAAAnB,EAAA,CAlDKD,KAAK;AAAAqB,EAAA,GAALrB,KAAK;AAoDX,eAAeA,KAAK;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}