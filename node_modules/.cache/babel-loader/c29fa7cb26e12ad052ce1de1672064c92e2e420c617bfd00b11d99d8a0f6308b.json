{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilnaz\\\\Desktop\\\\Pinocchio\\\\pinocchio-react\\\\src\\\\components\\\\screens\\\\Main\\\\TapZone.jsx\",\n  _s2 = $RefreshSig$();\nimport React, { useCallback, useEffect } from 'react';\nimport goldenCoin from '../../../assets/pictures/coins/golden/coin.svg';\nimport silverCoin from '../../../assets/pictures/coins/silver/coin.svg';\nimport axiosDB from '../../../utils/axios/axiosConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tg = window.Telegram.WebApp;\nconst TapZone = ({\n  telegramId,\n  currentEnergy,\n  setCurrentEnergy,\n  energyReduction,\n  stage,\n  currentCoins,\n  setCurrentCoins\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  const handleTouchStart = _s(useCallback(_s(async e => {\n    _s();\n    const touches = e.touches.length;\n    if (currentEnergy > energyReduction) {\n      const energySpent = energyReduction * touches;\n      const newEnergy = useEffect(() => Math.max(0, currentEnergy - energySpent), [currentEnergy]);\n      setCurrentEnergy(newEnergy);\n      const updatedCoins = currentCoins + energySpent;\n      setCurrentCoins(updatedCoins); // Оптимистическое обновление на клиенте\n\n      try {\n        const response = await axiosDB.put('/user/update', {\n          telegramId,\n          energy: newEnergy,\n          ...(stage === 1 ? {\n            soldo: updatedCoins\n          } : {\n            zecchino: updatedCoins\n          })\n        });\n\n        // Фактическое обновление состояния после успешного ответа\n        setCurrentEnergy(response.data.energy);\n        if (stage === 1) {\n          setCurrentCoins(response.data.soldo);\n        } else {\n          setCurrentCoins(response.data.zecchino);\n        }\n      } catch (error) {\n        console.error('Error updating user:', error);\n        // В случае ошибки можно добавить логику для отката изменений на клиенте\n      }\n      if (tg.HapticFeedback) {\n        tg.HapticFeedback.impactOccurred('light');\n      }\n    }\n  }, \"101myT0be/D8rmfr14o08SY/iMo=\"), [telegramId, currentEnergy, setCurrentEnergy, energyReduction, stage, currentCoins, setCurrentCoins]), \"101myT0be/D8rmfr14o08SY/iMo=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tap-zone\",\n    onTouchStart: handleTouchStart,\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      src: stage === 1 ? silverCoin : goldenCoin,\n      alt: \"coin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 3\n  }, this);\n};\n_s2(TapZone, \"umk88l/kBZbzjaXwIE2iERZCATg=\");\n_c = TapZone;\nexport default TapZone;\nvar _c;\n$RefreshReg$(_c, \"TapZone\");","map":{"version":3,"names":["React","useCallback","useEffect","goldenCoin","silverCoin","axiosDB","jsxDEV","_jsxDEV","tg","window","Telegram","WebApp","TapZone","telegramId","currentEnergy","setCurrentEnergy","energyReduction","stage","currentCoins","setCurrentCoins","_s2","_s","$RefreshSig$","handleTouchStart","e","touches","length","energySpent","newEnergy","Math","max","updatedCoins","response","put","energy","soldo","zecchino","data","error","console","HapticFeedback","impactOccurred","className","onTouchStart","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ilnaz/Desktop/Pinocchio/pinocchio-react/src/components/screens/Main/TapZone.jsx"],"sourcesContent":["import React, { useCallback, useEffect } from 'react'\r\nimport goldenCoin from '../../../assets/pictures/coins/golden/coin.svg'\r\nimport silverCoin from '../../../assets/pictures/coins/silver/coin.svg'\r\nimport axiosDB from '../../../utils/axios/axiosConfig'\r\n\r\nconst tg = window.Telegram.WebApp\r\n\r\nconst TapZone = ({\r\n\ttelegramId,\r\n\tcurrentEnergy,\r\n\tsetCurrentEnergy,\r\n\tenergyReduction,\r\n\tstage,\r\n\tcurrentCoins,\r\n\tsetCurrentCoins,\r\n}) => {\r\n\tconst handleTouchStart = useCallback(\r\n\t\tasync e => {\r\n\t\t\tconst touches = e.touches.length\r\n\t\t\tif (currentEnergy > energyReduction) {\r\n\t\t\t\tconst energySpent = energyReduction * touches\r\n\t\t\t\tconst newEnergy = useEffect(\r\n\t\t\t\t\t() => Math.max(0, currentEnergy - energySpent),\r\n\t\t\t\t\t[currentEnergy]\r\n\t\t\t\t)\r\n\t\t\t\tsetCurrentEnergy(newEnergy)\r\n\r\n\t\t\t\tconst updatedCoins = currentCoins + energySpent\r\n\t\t\t\tsetCurrentCoins(updatedCoins) // Оптимистическое обновление на клиенте\r\n\r\n\t\t\t\ttry {\r\n\t\t\t\t\tconst response = await axiosDB.put('/user/update', {\r\n\t\t\t\t\t\ttelegramId,\r\n\t\t\t\t\t\tenergy: newEnergy,\r\n\t\t\t\t\t\t...(stage === 1\r\n\t\t\t\t\t\t\t? { soldo: updatedCoins }\r\n\t\t\t\t\t\t\t: { zecchino: updatedCoins }),\r\n\t\t\t\t\t})\r\n\r\n\t\t\t\t\t// Фактическое обновление состояния после успешного ответа\r\n\t\t\t\t\tsetCurrentEnergy(response.data.energy)\r\n\t\t\t\t\tif (stage === 1) {\r\n\t\t\t\t\t\tsetCurrentCoins(response.data.soldo)\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tsetCurrentCoins(response.data.zecchino)\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (error) {\r\n\t\t\t\t\tconsole.error('Error updating user:', error)\r\n\t\t\t\t\t// В случае ошибки можно добавить логику для отката изменений на клиенте\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (tg.HapticFeedback) {\r\n\t\t\t\t\ttg.HapticFeedback.impactOccurred('light')\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t\t[\r\n\t\t\ttelegramId,\r\n\t\t\tcurrentEnergy,\r\n\t\t\tsetCurrentEnergy,\r\n\t\t\tenergyReduction,\r\n\t\t\tstage,\r\n\t\t\tcurrentCoins,\r\n\t\t\tsetCurrentCoins,\r\n\t\t]\r\n\t)\r\n\r\n\treturn (\r\n\t\t<div className='tap-zone' onTouchStart={handleTouchStart}>\r\n\t\t\t<img src={stage === 1 ? silverCoin : goldenCoin} alt='coin' />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default TapZone\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AACrD,OAAOC,UAAU,MAAM,gDAAgD;AACvE,OAAOC,UAAU,MAAM,gDAAgD;AACvE,OAAOC,OAAO,MAAM,kCAAkC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,EAAE,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM;AAEjC,MAAMC,OAAO,GAAGA,CAAC;EAChBC,UAAU;EACVC,aAAa;EACbC,gBAAgB;EAChBC,eAAe;EACfC,KAAK;EACLC,YAAY;EACZC;AACD,CAAC,KAAK;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EACL,MAAMC,gBAAgB,GAAAF,EAAA,CAAGpB,WAAW,CAAAoB,EAAA,CACnC,MAAMG,CAAC,IAAI;IAAAH,EAAA;IACV,MAAMI,OAAO,GAAGD,CAAC,CAACC,OAAO,CAACC,MAAM;IAChC,IAAIZ,aAAa,GAAGE,eAAe,EAAE;MACpC,MAAMW,WAAW,GAAGX,eAAe,GAAGS,OAAO;MAC7C,MAAMG,SAAS,GAAG1B,SAAS,CAC1B,MAAM2B,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEhB,aAAa,GAAGa,WAAW,CAAC,EAC9C,CAACb,aAAa,CACf,CAAC;MACDC,gBAAgB,CAACa,SAAS,CAAC;MAE3B,MAAMG,YAAY,GAAGb,YAAY,GAAGS,WAAW;MAC/CR,eAAe,CAACY,YAAY,CAAC,EAAC;;MAE9B,IAAI;QACH,MAAMC,QAAQ,GAAG,MAAM3B,OAAO,CAAC4B,GAAG,CAAC,cAAc,EAAE;UAClDpB,UAAU;UACVqB,MAAM,EAAEN,SAAS;UACjB,IAAIX,KAAK,KAAK,CAAC,GACZ;YAAEkB,KAAK,EAAEJ;UAAa,CAAC,GACvB;YAAEK,QAAQ,EAAEL;UAAa,CAAC;QAC9B,CAAC,CAAC;;QAEF;QACAhB,gBAAgB,CAACiB,QAAQ,CAACK,IAAI,CAACH,MAAM,CAAC;QACtC,IAAIjB,KAAK,KAAK,CAAC,EAAE;UAChBE,eAAe,CAACa,QAAQ,CAACK,IAAI,CAACF,KAAK,CAAC;QACrC,CAAC,MAAM;UACNhB,eAAe,CAACa,QAAQ,CAACK,IAAI,CAACD,QAAQ,CAAC;QACxC;MACD,CAAC,CAAC,OAAOE,KAAK,EAAE;QACfC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C;MACD;MAEA,IAAI9B,EAAE,CAACgC,cAAc,EAAE;QACtBhC,EAAE,CAACgC,cAAc,CAACC,cAAc,CAAC,OAAO,CAAC;MAC1C;IACD;EACD,CAAC,mCACD,CACC5B,UAAU,EACVC,aAAa,EACbC,gBAAgB,EAChBC,eAAe,EACfC,KAAK,EACLC,YAAY,EACZC,eAAe,CAEjB,CAAC;EAED,oBACCZ,OAAA;IAAKmC,SAAS,EAAC,UAAU;IAACC,YAAY,EAAEpB,gBAAiB;IAAAqB,QAAA,eACxDrC,OAAA;MAAKsC,GAAG,EAAE5B,KAAK,KAAK,CAAC,GAAGb,UAAU,GAAGD,UAAW;MAAC2C,GAAG,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAER,CAAC;AAAA9B,GAAA,CAjEKR,OAAO;AAAAuC,EAAA,GAAPvC,OAAO;AAmEb,eAAeA,OAAO;AAAA,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}