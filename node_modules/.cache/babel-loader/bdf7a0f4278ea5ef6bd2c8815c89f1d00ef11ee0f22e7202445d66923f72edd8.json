{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilnaz\\\\Desktop\\\\Pinocchio\\\\pinocchio-react\\\\src\\\\components\\\\screens\\\\Main\\\\Main.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport wallet from '../../../assets/pictures/wallet.svg';\nimport axiosDB from '../../../utils/axios/axiosConfig';\nimport Navigation from '../../ui/Navigation/Navigation';\nimport Loading from '../Loading/Loading';\nimport MainBalance from './Balance/Balance';\nimport MainCoins from './Balance/Coins';\nimport EnergyBar from './Energy/EnergyBar';\nimport EnergyCount from './Energy/EnergyCount';\nimport './Main.css';\nimport TapZone from './TapZone';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [currentEnergy, setCurrentEnergy] = useState(0);\n  const [currentMaxEnergy, setCurrentMaxEnergy] = useState(100);\n  const [stage, setStage] = useState(1);\n  const [coins, setCoins] = useState(0);\n  const [loading, setLoading] = useState(true);\n  const energyRegenRate = 1; // Скорость восстановления энергии\n  const telegramId = '1145622789';\n\n  // Функция для обновления данных на сервере\n  const updateUserDataOnServer = async updatedData => {\n    try {\n      await axiosDB.put(`/user/update/${telegramId}`, updatedData);\n    } catch (error) {\n      console.error('Error updating user data on server:', error);\n    }\n  };\n\n  // Функция для оптимистического обновления на клиенте\n  const optimisticUpdateClient = updatedData => {\n    setCurrentEnergy(updatedData.energy);\n    if (stage === 1) {\n      setCoins(updatedData.soldo);\n    } else {\n      setCoins(updatedData.zecchino);\n    }\n  };\n  useEffect(() => {\n    const fetchUserData = async () => {\n      try {\n        const response = await axiosDB.get(`/user/${telegramId}`);\n        const user = response.data;\n        setCurrentEnergy(user.energy);\n        setCurrentMaxEnergy(user.maxEnergy);\n        setStage(user.stage);\n        user.stage === 1 ? setCoins(user.soldo) : setCoins(user.zecchino);\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchUserData();\n  }, [telegramId]);\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      setCurrentEnergy(prevEnergy => Math.min(prevEnergy + energyRegenRate, currentMaxEnergy));\n    }, 1000);\n    return () => clearInterval(intervalId);\n  }, [currentMaxEnergy]);\n\n  // Обработчик тапа для компонента TapZone\n  const handleTap = async energySpent => {\n    if (currentEnergy > 0) {\n      const newEnergy = Math.max(0, currentEnergy - energySpent);\n      const updatedCoins = coins + energySpent;\n\n      // Оптимистическое обновление на клиенте\n      optimisticUpdateClient({\n        energy: newEnergy,\n        soldo: updatedCoins\n      });\n\n      // Отправка данных на сервер\n      updateUserDataOnServer({\n        energy: newEnergy,\n        ...(stage === 1 ? {\n          soldo: updatedCoins\n        } : {\n          zecchino: updatedCoins\n        })\n      });\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 10\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container main\",\n    children: [/*#__PURE__*/_jsxDEV(MainBalance, {\n      stage: stage,\n      coins: coins\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(MainCoins, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(TapZone, {\n      onTap: handleTap,\n      energyReduction: 3,\n      stage: stage,\n      currentCoins: coins\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"group main\",\n      children: [/*#__PURE__*/_jsxDEV(EnergyCount, {\n        currentEnergy: currentEnergy\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/wallet\",\n        className: \"block\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"icon\",\n          src: wallet,\n          alt: \"wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(EnergyBar, {\n      currentEnergy: currentEnergy,\n      maxEnergy: currentMaxEnergy\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 3\n  }, this);\n};\n_s(Main, \"XwyJ7CS6iqY6XwlBr6b0Bdbg9Ug=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useEffect","useState","Link","wallet","axiosDB","Navigation","Loading","MainBalance","MainCoins","EnergyBar","EnergyCount","TapZone","jsxDEV","_jsxDEV","Main","_s","currentEnergy","setCurrentEnergy","currentMaxEnergy","setCurrentMaxEnergy","stage","setStage","coins","setCoins","loading","setLoading","energyRegenRate","telegramId","updateUserDataOnServer","updatedData","put","error","console","optimisticUpdateClient","energy","soldo","zecchino","fetchUserData","response","get","user","data","maxEnergy","intervalId","setInterval","prevEnergy","Math","min","clearInterval","handleTap","energySpent","newEnergy","max","updatedCoins","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onTap","energyReduction","currentCoins","to","src","alt","_c","$RefreshReg$"],"sources":["C:/Users/ilnaz/Desktop/Pinocchio/pinocchio-react/src/components/screens/Main/Main.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport wallet from '../../../assets/pictures/wallet.svg'\r\nimport axiosDB from '../../../utils/axios/axiosConfig'\r\nimport Navigation from '../../ui/Navigation/Navigation'\r\nimport Loading from '../Loading/Loading'\r\nimport MainBalance from './Balance/Balance'\r\nimport MainCoins from './Balance/Coins'\r\nimport EnergyBar from './Energy/EnergyBar'\r\nimport EnergyCount from './Energy/EnergyCount'\r\nimport './Main.css'\r\nimport TapZone from './TapZone'\r\n\r\nconst Main = () => {\r\n\tconst [currentEnergy, setCurrentEnergy] = useState(0)\r\n\tconst [currentMaxEnergy, setCurrentMaxEnergy] = useState(100)\r\n\tconst [stage, setStage] = useState(1)\r\n\tconst [coins, setCoins] = useState(0)\r\n\tconst [loading, setLoading] = useState(true)\r\n\tconst energyRegenRate = 1 // Скорость восстановления энергии\r\n\tconst telegramId = '1145622789'\r\n\r\n\t// Функция для обновления данных на сервере\r\n\tconst updateUserDataOnServer = async updatedData => {\r\n\t\ttry {\r\n\t\t\tawait axiosDB.put(`/user/update/${telegramId}`, updatedData)\r\n\t\t} catch (error) {\r\n\t\t\tconsole.error('Error updating user data on server:', error)\r\n\t\t}\r\n\t}\r\n\r\n\t// Функция для оптимистического обновления на клиенте\r\n\tconst optimisticUpdateClient = updatedData => {\r\n\t\tsetCurrentEnergy(updatedData.energy)\r\n\t\tif (stage === 1) {\r\n\t\t\tsetCoins(updatedData.soldo)\r\n\t\t} else {\r\n\t\t\tsetCoins(updatedData.zecchino)\r\n\t\t}\r\n\t}\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchUserData = async () => {\r\n\t\t\ttry {\r\n\t\t\t\tconst response = await axiosDB.get(`/user/${telegramId}`)\r\n\t\t\t\tconst user = response.data\r\n\t\t\t\tsetCurrentEnergy(user.energy)\r\n\t\t\t\tsetCurrentMaxEnergy(user.maxEnergy)\r\n\t\t\t\tsetStage(user.stage)\r\n\t\t\t\tuser.stage === 1 ? setCoins(user.soldo) : setCoins(user.zecchino)\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.error('Error fetching user data:', error)\r\n\t\t\t} finally {\r\n\t\t\t\tsetLoading(false)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tfetchUserData()\r\n\t}, [telegramId])\r\n\r\n\tuseEffect(() => {\r\n\t\tconst intervalId = setInterval(() => {\r\n\t\t\tsetCurrentEnergy(prevEnergy =>\r\n\t\t\t\tMath.min(prevEnergy + energyRegenRate, currentMaxEnergy)\r\n\t\t\t)\r\n\t\t}, 1000)\r\n\r\n\t\treturn () => clearInterval(intervalId)\r\n\t}, [currentMaxEnergy])\r\n\r\n\t// Обработчик тапа для компонента TapZone\r\n\tconst handleTap = async energySpent => {\r\n\t\tif (currentEnergy > 0) {\r\n\t\t\tconst newEnergy = Math.max(0, currentEnergy - energySpent)\r\n\t\t\tconst updatedCoins = coins + energySpent\r\n\r\n\t\t\t// Оптимистическое обновление на клиенте\r\n\t\t\toptimisticUpdateClient({ energy: newEnergy, soldo: updatedCoins })\r\n\r\n\t\t\t// Отправка данных на сервер\r\n\t\t\tupdateUserDataOnServer({\r\n\t\t\t\tenergy: newEnergy,\r\n\t\t\t\t...(stage === 1 ? { soldo: updatedCoins } : { zecchino: updatedCoins }),\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tif (loading) {\r\n\t\treturn <Loading />\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='container main'>\r\n\t\t\t<MainBalance stage={stage} coins={coins} />\r\n\t\t\t<MainCoins />\r\n\t\t\t<TapZone\r\n\t\t\t\tonTap={handleTap}\r\n\t\t\t\tenergyReduction={3}\r\n\t\t\t\tstage={stage}\r\n\t\t\t\tcurrentCoins={coins}\r\n\t\t\t/>\r\n\t\t\t<div className='group main'>\r\n\t\t\t\t<EnergyCount currentEnergy={currentEnergy} />\r\n\t\t\t\t<Link to='/wallet' className='block'>\r\n\t\t\t\t\t<img className='icon' src={wallet} alt='wallet' />\r\n\t\t\t\t</Link>\r\n\t\t\t</div>\r\n\t\t\t<EnergyBar currentEnergy={currentEnergy} maxEnergy={currentMaxEnergy} />\r\n\t\t\t<Navigation />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Main\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}